{"version":3,"sources":["api.js","components/Status.js","components/QueuedSample.js","components/QueuedSamples.js","utils.js","components/NextSeqPacBioRunsQueuedTable.js","components/RunsUpcomingTable.js","components/RunsQueuedTable.js","components/ReceivedSample.js","components/ReceivedSamples.js","components/SamplesReceivedTable.js","containers/App.js","index.js"],"names":["API_URL","Status","props","status","show","className","QueuedSample","sampleGroup","imr_id","submitted_by","target","n_samples","needs_library","library_status","sequencing_status","needs_analysis","analysis_status","key","length","runId","QueuedSamples","sampleGroups","map","style","backgroundColor","colSpan","height","nSamplesInGroups","platform","filtered","filter","sequencing_platform","reduce","acc","sample","nSamplesInRuns","runs","run","samples","filterCurrentRuns","excludeUnscheduled","now","Date","r","planned_end","moment","stylesTable","borderCollapse","borderSpacing","NextSeqPacBioRunsQueuedTable","currentRuns","nNextSeqSamples","nPacBioSamples","color","run_id","styles","table","width","emptyRow","textAlign","RunsUpcomingTable","upcomingRuns","orderBy","planned_start","platformName","run_type","format","RunsQueuedTable","nSamples","ReceivedSample","ReceivedSamples","SamplesReceivedTable","stylesHeaderText","fontWeight","fontSize","App","state","queues","samplesReceived","loadingSequencingRuns","loadingSampleGroups","error","handleError","setState","loading","request","Request","fetch","then","response","json","fetchSequencingRuns","catch","this","fetchSampleGroups","nTotalSamples","miseqRuns","queue","nextseqRuns","pacBioRuns","align","size","reverse","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2998cde1.chunk.js","sourcesContent":["const server = process.env.REACT_APP_API_SERVER || 'local';\nlet API_URL;\n\nif (server === 'local') {\n  API_URL = 'http://localhost:8000/api';\n} else if (server === 'imr-prod') {\n  API_URL = 'https://imr-prod.herokuapp.com/api';\n} else if (server === 'imr-dev') {\n  API_URL = 'https://imr-dev.herokuapp.com/api';\n}\n\nexport function fetchSampleGroups() {\n  const request = new Request(`${API_URL}/sample_groups/`);\n  return fetch(request).then(response => response.json());\n}\n\nexport function fetchSequencingRuns() {\n  const request = new Request(`${API_URL}/runs/`);\n  return fetch(request).then(response => response.json());\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Status(props) {\n  const { status, show } = props;\n  if (show && status === 'InProgress') {\n    return <span className=\"dotO\">●</span>;\n  } else if (show && status === 'Done') {\n    return <span className=\"dotG\">●</span>;\n  } else {\n    return <span>-</span>;\n  }\n}\n\nStatus.propTypes = {\n  status: PropTypes.string.isRequired,\n  show: PropTypes.bool\n};\n\nexport default Status;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Status from './Status';\n\nfunction QueuedSample(props) {\n  const {\n      imr_id, submitted_by, target, n_samples,\n      needs_library, library_status,\n      sequencing_status,\n      needs_analysis, analysis_status\n    } = props.sampleGroup;\n  return (\n      <tr key={imr_id}>\n        <td>{imr_id}{ submitted_by.length ? ` (${submitted_by})` : ''}</td>\n        <td>{props.runId}</td>\n        <td>{target}</td>\n        <td>{n_samples}</td>\n        <td>\n          <Status\n            show={needs_library}\n            status={library_status}/>\n        </td>\n        <td>\n          <Status\n            show={true}\n            status={sequencing_status}/>\n        </td>\n        <td>\n          <Status\n            show={needs_analysis}\n            status={analysis_status}/>\n        </td>\n      </tr>\n    );\n}\n\nQueuedSample.propTypes = {\n  sampleGroup: PropTypes.object.isRequired,\n  runId: PropTypes.string.isRequired\n};\n\nexport default QueuedSample;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport QueuedSample from './QueuedSample';\n\nfunction QueuedSamples(props) {\n  return [\n    props.sampleGroups.map(sampleGroup => (\n      <QueuedSample\n        key={sampleGroup.imr_id}\n        runId={props.runId}\n        sampleGroup={sampleGroup}/>\n    )),\n    <tr key={props.runId} style={{backgroundColor: 'grey'}}>\n      <td colSpan={7} height=\"10\"></td>\n    </tr>\n  ];\n}\n\nQueuedSamples.propTypes = {\n  sampleGroups: PropTypes.array.isRequired,\n  runId: PropTypes.string.isRequired\n};\n\nexport default QueuedSamples;\n","import moment from 'moment';\n\nexport function nSamplesInGroups(sampleGroups, platform) {\n  let filtered = sampleGroups;\n  if (platform) {\n    filtered = filtered.filter(sampleGroup => sampleGroup.sequencing_platform === platform);\n  }\n  return filtered.reduce((acc, sample) => acc + sample.n_samples, 0);\n}\n\nexport function nSamplesInRuns(runs, platform) {\n  return runs.reduce((acc, run) => acc + nSamplesInGroups(run.samples, platform), 0);\n}\n\n/**\n * Returns an array of current runs.\n *\n * A current run is one whose planned_end has not passed the current date.\n *\n * If excludeUnscheduled is set (it is by default), the runs with no\n * planned_end are also excluded.\n */\nexport function filterCurrentRuns(runs, excludeUnscheduled = true) {\n  const now = new Date();\n  if (!excludeUnscheduled) {\n    return runs.filter(r =>\n      (r.planned_end && (moment(r.planned_end) > now)) || !r.planned_end);\n  }\n  return runs.filter(r => r.planned_end && (moment(r.planned_end) > now));\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport QueuedSamples from './QueuedSamples';\nimport { filterCurrentRuns, nSamplesInRuns } from '../utils';\n\nconst stylesTable = {\n  borderCollapse: 'collapse',\n  borderSpacing: 0\n};\n\nfunction NextSeqPacBioRunsQueuedTable(props) {\n  const currentRuns = filterCurrentRuns(props.runs, false)\n  const nNextSeqSamples = nSamplesInRuns(currentRuns, 'NextSeq');\n  const nPacBioSamples = nSamplesInRuns(currentRuns, 'PacBio');\n  return (\n    <table className=\"queueT\" style={stylesTable}>\n      <tbody>\n        <tr>\n          <th colSpan={7}>\n            Queued for <span style={{ color: 'red' }}>NextSeq</span>&nbsp;({nNextSeqSamples})\n            &amp; <span style={{ color: 'red' }}>PacBio</span>&nbsp;({nPacBioSamples})\n          </th>\n        </tr>\n        <tr>\n          <th></th>\n          <th>Run</th>\n          <th>Target</th>\n          <th>#</th>\n          <th>Libr.</th>\n          <th>Seq.</th>\n          <th>Anal.</th>\n        </tr>\n        {props.runs.map(run => (\n          <QueuedSamples\n            key={'sg' + run.run_id}\n            runId={run.run_id}\n            sampleGroups={run.samples} />\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nNextSeqPacBioRunsQueuedTable.propTypes = {\n  platformName: PropTypes.string.isRequired,\n  runs: PropTypes.array.isRequired\n};\n\nexport default NextSeqPacBioRunsQueuedTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { orderBy } from 'lodash';\n\nconst styles = {\n  table: {\n    width: '60%',\n    borderCollapse: 'collapse',\n    borderSpacing: 0\n  },\n  emptyRow: {\n    textAlign: 'center'\n  }\n};\n\n\nfunction RunsUpcomingTable(props) {\n  const upcomingRuns = orderBy(\n    props.runs.filter(run => run.planned_start), 'planned_start', 'desc'\n  );\n  return (\n    <table className=\"queueT\" style={styles.table}>\n      <tbody>\n        <tr>\n          <th colSpan={4}>\n            Upcoming <span style={{ color: 'red' }}>{props.platformName}</span> Runs\n          </th>\n        </tr>\n        <tr>\n          <th>Run</th>\n          <th>Type</th>\n          <th>#</th>\n          <th>Planned Dates</th>\n        </tr>\n        {upcomingRuns.length ? upcomingRuns.map(run => (\n          <tr key={run.run_id}>\n            <td>{run.run_id}</td>\n            <td>{run.run_type}</td>\n            <td>{run.n_samples}</td>\n            <td>\n              {moment(run.planned_start).format('MMM. D')}\n              &nbsp;&ndash;&nbsp;\n              {moment(run.planned_end).format('MMM. D')}\n            </td>\n          </tr>\n        )) :\n          <tr>\n            <td colSpan={4} style={styles.emptyRow}>\n              No upcoming {props.platformName} runs.\n            </td>\n          </tr>\n        }\n      </tbody>\n    </table>\n  );\n}\n\nRunsUpcomingTable.propTypes = {\n  platformName: PropTypes.string.isRequired,\n  runs: PropTypes.array.isRequired\n};\n\nexport default RunsUpcomingTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport QueuedSamples from './QueuedSamples';\nimport { filterCurrentRuns, nSamplesInRuns } from '../utils';\n\nconst stylesTable = {\n  borderCollapse: 'collapse',\n  borderSpacing: 0\n};\n\nfunction RunsQueuedTable(props) {\n  const nSamples = nSamplesInRuns(filterCurrentRuns(props.runs, false));\n  return (\n    <table className=\"queueT\" style={stylesTable}>\n      <tbody>\n        <tr>\n          <th colSpan={7}>\n            Queued for <span style={{ color: 'red' }}>{props.platformName}</span>\n          &nbsp;({nSamples})\n          </th>\n        </tr>\n        <tr>\n          <th></th>\n          <th>Run</th>\n          <th>Target</th>\n          <th>#</th>\n          <th>Libr.</th>\n          <th>Seq.</th>\n          <th>Anal.</th>\n        </tr>\n        {props.runs.map(run => (\n          <QueuedSamples\n            key={'sg' + run.run_id}\n            runId={run.run_id}\n            sampleGroups={run.samples} />\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nRunsQueuedTable.propTypes = {\n  platformName: PropTypes.string.isRequired,\n  runs: PropTypes.array.isRequired\n};\n\nexport default RunsQueuedTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ReceivedSample(props) {\n  const { sampleGroup } = props;\n  return (\n    <tr key={sampleGroup.imr_id}>\n      <td>{sampleGroup.imr_id}{ sampleGroup.submitted_by.length ? ` (${sampleGroup.submitted_by})` : ''}</td>\n      <td>{sampleGroup.target}</td>\n      <td>{sampleGroup.n_samples}</td>\n    </tr>\n  );\n}\n\nReceivedSample.propTypes = {\n  sampleGroup: PropTypes.object.isRequired\n};\n\nexport default ReceivedSample;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReceivedSample from './ReceivedSample';\n\nfunction ReceivedSamples(props) {\n  return props.sampleGroups.map(sampleGroup => (\n    <ReceivedSample key={sampleGroup.imr_id} sampleGroup={sampleGroup} />\n  ));\n}\n\nReceivedSamples.propTypes = {\n  sampleGroups: PropTypes.array.isRequired\n};\n\nexport default ReceivedSamples;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { nSamplesInGroups } from '../utils';\nimport ReceivedSamples from './ReceivedSamples';\n\nconst stylesTable = {\n  borderCollapse: 'collapse',\n  borderSpacing: 0\n};\n\nfunction SamplesReceivedTable(props) {\n  const nSamples = nSamplesInGroups(props.sampleGroups);\n  return (\n    <table className=\"queueT\" style={stylesTable}>\n      <tbody>\n        <tr>\n          <th colSpan={7}>\n            <span style={{ color: 'red' }}>Samples Received</span> ({nSamples})\n          </th>\n        </tr>\n        <tr>\n          <th></th>\n          <th>Target</th>\n          <th>#</th>\n        </tr>\n        <ReceivedSamples sampleGroups={props.sampleGroups} />\n      </tbody>\n    </table>\n  );\n}\n\nSamplesReceivedTable.propTypes = {\n  sampleGroups: PropTypes.array.isRequired\n};\n\nexport default SamplesReceivedTable;\n","import React, { Component } from 'react';\nimport { PulseLoader } from 'react-spinners';\nimport { fetchSampleGroups, fetchSequencingRuns } from '../api';\nimport NextSeqPacBioRunsQueuedTable from '../components/NextSeqPacBioRunsQueuedTable';\nimport RunsUpcomingTable from '../components/RunsUpcomingTable';\nimport RunsQueuedTable from '../components/RunsQueuedTable';\nimport SamplesReceivedTable from '../components/SamplesReceivedTable';\nimport { nSamplesInGroups, nSamplesInRuns, filterCurrentRuns } from '../utils';\n\nconst stylesHeaderText = {\n  textAlign: 'center',\n  fontWeight: '400',\n  fontSize: 'x-large',\n};\n\nclass App extends Component {\n  state = {\n    queues: {},\n    samplesReceived: [],\n    runs: [],\n    loadingSequencingRuns: true,\n    loadingSampleGroups: true,\n    error: false,\n  };\n\n  handleError = () => {\n    this.setState({\n      error: true,\n      loading: false\n    });\n  };\n\n  componentDidMount() {\n    fetchSequencingRuns()\n      .then(runs => {\n        this.setState({ runs, loadingSequencingRuns: false });\n      })\n      .catch(this.handleError);\n    fetchSampleGroups()\n      .then(samplesReceived => {\n        this.setState({ samplesReceived, loadingSampleGroups: false });\n      })\n      .catch(this.handleError);\n  }\n\n  render() {\n    if (this.state.error) {\n      return (\n        <div>\n          There was a problem loading the queue. Please try again later.\n        </div>\n      );\n    }\n\n    const loading = this.state.loadingSampleGroups\n      || this.state.loadingSequencingRuns;\n    if (loading) {\n      return (\n        <div style={{textAlign: 'center'}}>\n          <PulseLoader loading={loading} color={'#281835'} />\n          <p style={{textAlign: 'center'}}>Loading queue...</p>\n        </div>\n      );\n    }\n\n    const { runs, samplesReceived } = this.state;\n    const nTotalSamples = nSamplesInRuns(filterCurrentRuns(runs, false))\n      + nSamplesInGroups(samplesReceived);\n    const miseqRuns = runs.filter(run => run.queue === 'MiSeq');\n    const nextseqRuns = runs.filter(run => run.queue === 'NextSeq');\n    const pacBioRuns = runs.filter(run => run.queue === 'PacBio');\n    return (\n      <div>\n        <div style={stylesHeaderText}>\n          Current total number of samples/slots committed to queue: &nbsp;\n          <span style={{ color: 'red' }}>{nTotalSamples}</span>\n          <br />\n          {/* TODO(karlrl): Use the last modified time of any resource for this? */}\n          {/*Last update of queue: &nbsp; <span style={{ color: 'red' }}>Apr.5</span>*/}\n        </div>\n        <p></p>\n        <table>\n        <tbody>\n          <tr>\n            <td align=\"center\">\n              <RunsUpcomingTable\n                platformName='MiSeq'\n                runs={filterCurrentRuns(miseqRuns)} />\n            </td>\n            <td align=\"center\">\n              <RunsUpcomingTable\n                platformName='NextSeq'\n                runs={filterCurrentRuns(nextseqRuns)} />\n            </td>\n            <td align=\"center\">\n              <RunsUpcomingTable\n                platformName='PacBio'\n                runs={filterCurrentRuns(pacBioRuns)} />\n            </td>\n          </tr>\n        </tbody>\n        </table>\n        <section>\n          <p>\n            <font size=\"3em\">\n              Legend:\n              <span className=\"dotO\">●</span> = in progress/pending;\n              <span className=\"dotG\">●</span> = completed;\n              Extr. = extracted (either in advance by client, or by IMR);\n              Libr. = library prepared; Seq. = sequenced;\n              Anal. = analyzed (if requested).\n            </font>\n          </p>\n          <p></p>\n          <table>\n            <tbody>\n              <tr>\n                <td align=\"center\" style={{ width: '32%' }}>\n                  <SamplesReceivedTable sampleGroups={samplesReceived.reverse()}/>\n                </td>\n                <td style={{ width: '2%' }}>&nbsp;</td>\n                <td align=\"center\" style={{ width: '32%' }}>\n                  <RunsQueuedTable platformName='MiSeq' runs={miseqRuns}/>\n                </td>\n                <td style={{ width: '2%' }}>&nbsp;</td>\n                <td align=\"center\" style={{ width: '32%' }}>\n                  {/* This is a (temporary) special queue table while PacBio is mixed with the NextSeq queue */}\n                  <NextSeqPacBioRunsQueuedTable platformName='NextSeq' runs={nextseqRuns}/>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\n\nReactDOM.render(<App />, document.getElementById('queue-app-root'));\n"],"sourceRoot":""}