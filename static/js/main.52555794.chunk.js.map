{"version":3,"sources":["api.js","components/RunsUpcomingTable.js","components/Status.js","components/QueuedSample.js","components/QueuedSamples.js","utils.js","components/RunsQueuedTable.js","components/ReceivedSample.js","components/ReceivedSamples.js","components/SamplesReceivedTable.js","containers/App.js","index.js"],"names":["API_URL","styles","table","width","borderCollapse","borderSpacing","emptyRow","textAlign","RunsUpcomingTable","props","upcomingRuns","orderBy","runs","filter","run","planned_start","className","style","colSpan","color","platformName","length","map","key","run_id","run_type","n_samples","moment","format","planned_end","Status","status","show","QueuedSample","sampleGroup","imr_id","submitted_by","target","needs_library","library_status","sequencing_status","needs_analysis","analysis_status","runId","QueuedSamples","sampleGroups","backgroundColor","height","nSamplesInGroups","reduce","acc","sample","nSamplesInRuns","samples","filterCurrentRuns","excludeUnscheduled","now","Date","r","stylesTable","RunsQueuedTable","nSamples","ReceivedSample","ReceivedSamples","SamplesReceivedTable","stylesHeaderText","fontWeight","fontSize","App","state","queues","samplesReceived","loadingSequencingRuns","loadingSampleGroups","error","handleError","setState","loading","request","Request","fetch","then","response","json","fetchSequencingRuns","catch","this","fetchSampleGroups","nTotalSamples","miseqRuns","queue","nextseqRuns","align","size","reverse","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52555794.chunk.js","sourcesContent":["const server = process.env.REACT_APP_API_SERVER || 'local';\nlet API_URL;\n\nif (server === 'local') {\n  API_URL = 'http://localhost:8000/api';\n} else if (server === 'imr-prod') {\n  API_URL = 'https://imr-prod.herokuapp.com/api';\n} else if (server === 'imr-dev') {\n  API_URL = 'https://imr-dev.herokuapp.com/api';\n}\n\nexport function fetchSampleGroups() {\n  const request = new Request(`${API_URL}/sample_groups/`);\n  return fetch(request).then(response => response.json());\n}\n\nexport function fetchSequencingRuns() {\n  const request = new Request(`${API_URL}/runs/`);\n  return fetch(request).then(response => response.json());\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { orderBy } from 'lodash';\n\nconst styles = {\n  table: {\n    width: '60%',\n    borderCollapse: 'collapse',\n    borderSpacing: 0\n  },\n  emptyRow: {\n    textAlign: 'center'\n  }\n};\n\n\nfunction RunsUpcomingTable(props) {\n  const upcomingRuns = orderBy(\n    props.runs.filter(run => run.planned_start), 'planned_start', 'desc'\n  );\n  return (\n    <table className=\"queueT\" style={styles.table}>\n      <tbody>\n        <tr>\n          <th colSpan={4}>\n            Upcoming <span style={{ color: 'red' }}>{props.platformName}</span> Runs\n          </th>\n        </tr>\n        <tr>\n          <th>Run</th>\n          <th>Type</th>\n          <th>#</th>\n          <th>Planned Dates</th>\n        </tr>\n        {upcomingRuns.length ? upcomingRuns.map(run => (\n          <tr key={run.run_id}>\n            <td>{run.run_id}</td>\n            <td>{run.run_type}</td>\n            <td>{run.n_samples}</td>\n            <td>\n              {moment(run.planned_start).format('MMM. D')}\n              &nbsp;&ndash;&nbsp;\n              {moment(run.planned_end).format('MMM. D')}\n            </td>\n          </tr>\n        )) :\n          <tr>\n            <td colSpan={4} style={styles.emptyRow}>\n              No upcoming {props.platformName} runs.\n            </td>\n          </tr>\n        }\n      </tbody>\n    </table>\n  );\n}\n\nRunsUpcomingTable.propTypes = {\n  platformName: PropTypes.string.isRequired,\n  runs: PropTypes.array.isRequired\n};\n\nexport default RunsUpcomingTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Status(props) {\n  const { status, show } = props;\n  if (show && status === 'InProgress') {\n    return <span className=\"dotO\">●</span>;\n  } else if (show && status === 'Done') {\n    return <span className=\"dotG\">●</span>;\n  } else {\n    return <span>-</span>;\n  }\n}\n\nStatus.propTypes = {\n  status: PropTypes.string.isRequired,\n  show: PropTypes.bool\n};\n\nexport default Status;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Status from './Status';\n\nfunction QueuedSample(props) {\n  const {\n      imr_id, submitted_by, target, n_samples,\n      needs_library, library_status,\n      sequencing_status,\n      needs_analysis, analysis_status\n    } = props.sampleGroup;\n  return (\n      <tr key={imr_id}>\n        <td>{imr_id}{ submitted_by.length ? ` (${submitted_by})` : ''}</td>\n        <td>{props.runId}</td>\n        <td>{target}</td>\n        <td>{n_samples}</td>\n        <td>\n          <Status\n            show={needs_library}\n            status={library_status}/>\n        </td>\n        <td>\n          <Status\n            show={true}\n            status={sequencing_status}/>\n        </td>\n        <td>\n          <Status\n            show={needs_analysis}\n            status={analysis_status}/>\n        </td>\n      </tr>\n    );\n}\n\nQueuedSample.propTypes = {\n  sampleGroup: PropTypes.object.isRequired,\n  runId: PropTypes.string.isRequired\n};\n\nexport default QueuedSample;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport QueuedSample from './QueuedSample';\n\nfunction QueuedSamples(props) {\n  return [\n    props.sampleGroups.map(sampleGroup => (\n      <QueuedSample\n        key={sampleGroup.imr_id}\n        runId={props.runId}\n        sampleGroup={sampleGroup}/>\n    )),\n    <tr key={props.runId} style={{backgroundColor: 'grey'}}>\n      <td colSpan={7} height=\"10\"></td>\n    </tr>\n  ];\n}\n\nQueuedSamples.propTypes = {\n  sampleGroups: PropTypes.array.isRequired,\n  runId: PropTypes.string.isRequired\n};\n\nexport default QueuedSamples;\n","import moment from 'moment';\n\nexport function nSamplesInGroups(sampleGroups) {\n  return sampleGroups.reduce((acc, sample) => acc + sample.n_samples, 0);\n}\n\nexport function nSamplesInRuns(runs) {\n  return runs.reduce((acc, run) => acc + nSamplesInGroups(run.samples), 0);\n}\n\n/**\n * Returns an array of current runs.\n *\n * A current run is one whose planned_end has not passed the current date.\n *\n * If excludeUnscheduled is set (it is by default), the runs with no\n * planned_end are also excluded.\n */\nexport function filterCurrentRuns(runs, excludeUnscheduled = true) {\n  const now = new Date();\n  if (!excludeUnscheduled) {\n    return runs.filter(r =>\n      (r.planned_end && (moment(r.planned_end) > now)) || !r.planned_end);\n  }\n  return runs.filter(r => r.planned_end && (moment(r.planned_end) > now));\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport QueuedSamples from './QueuedSamples';\nimport { filterCurrentRuns, nSamplesInRuns } from '../utils';\n\nconst stylesTable = {\n  borderCollapse: 'collapse',\n  borderSpacing: 0\n};\n\nfunction RunsQueuedTable(props) {\n  const nSamples = nSamplesInRuns(filterCurrentRuns(props.runs, false));\n  return (\n    <table className=\"queueT\" style={stylesTable}>\n      <tbody>\n        <tr>\n          <th colSpan={7}>\n            Queued for <span style={{ color: 'red' }}>{props.platformName}</span>\n          &nbsp;({nSamples})\n          </th>\n        </tr>\n        <tr>\n          <th></th>\n          <th>Run</th>\n          <th>Target</th>\n          <th>#</th>\n          <th>Libr.</th>\n          <th>Seq.</th>\n          <th>Anal.</th>\n        </tr>\n        {props.runs.map(run => (\n          <QueuedSamples\n            key={'sg' + run.run_id}\n            runId={run.run_id}\n            sampleGroups={run.samples} />\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nRunsQueuedTable.propTypes = {\n  platformName: PropTypes.string.isRequired,\n  runs: PropTypes.array.isRequired\n};\n\nexport default RunsQueuedTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ReceivedSample(props) {\n  const { sampleGroup } = props;\n  return (\n    <tr key={sampleGroup.imr_id}>\n      <td>{sampleGroup.imr_id}{ sampleGroup.submitted_by.length ? ` (${sampleGroup.submitted_by})` : ''}</td>\n      <td>{sampleGroup.target}</td>\n      <td>{sampleGroup.n_samples}</td>\n    </tr>\n  );\n}\n\nReceivedSample.propTypes = {\n  sampleGroup: PropTypes.object.isRequired\n};\n\nexport default ReceivedSample;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReceivedSample from './ReceivedSample';\n\nfunction ReceivedSamples(props) {\n  return props.sampleGroups.map(sampleGroup => (\n    <ReceivedSample key={sampleGroup.imr_id} sampleGroup={sampleGroup} />\n  ));\n}\n\nReceivedSamples.propTypes = {\n  sampleGroups: PropTypes.array.isRequired\n};\n\nexport default ReceivedSamples;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { nSamplesInGroups } from '../utils';\nimport ReceivedSamples from './ReceivedSamples';\n\nconst stylesTable = {\n  borderCollapse: 'collapse',\n  borderSpacing: 0\n};\n\nfunction SamplesReceivedTable(props) {\n  const nSamples = nSamplesInGroups(props.sampleGroups);\n  return (\n    <table className=\"queueT\" style={stylesTable}>\n      <tbody>\n        <tr>\n          <th colSpan={7}>\n            <span style={{ color: 'red' }}>Samples Received</span> ({nSamples})\n          </th>\n        </tr>\n        <tr>\n          <th></th>\n          <th>Target</th>\n          <th>#</th>\n        </tr>\n        <ReceivedSamples sampleGroups={props.sampleGroups} />\n      </tbody>\n    </table>\n  );\n}\n\nSamplesReceivedTable.propTypes = {\n  sampleGroups: PropTypes.array.isRequired\n};\n\nexport default SamplesReceivedTable;\n","import React, { Component } from 'react';\nimport { PulseLoader } from 'react-spinners';\nimport { fetchSampleGroups, fetchSequencingRuns } from '../api';\nimport RunsUpcomingTable from '../components/RunsUpcomingTable';\nimport RunsQueuedTable from '../components/RunsQueuedTable';\nimport SamplesReceivedTable from '../components/SamplesReceivedTable';\nimport { nSamplesInGroups, nSamplesInRuns, filterCurrentRuns } from '../utils';\n\nconst stylesHeaderText = {\n  textAlign: 'center',\n  fontWeight: '400',\n  fontSize: 'x-large',\n};\n\nclass App extends Component {\n  state = {\n    queues: {},\n    samplesReceived: [],\n    runs: [],\n    loadingSequencingRuns: true,\n    loadingSampleGroups: true,\n    error: false,\n  };\n\n  handleError = () => {\n    this.setState({\n      error: true,\n      loading: false\n    });\n  };\n\n  componentDidMount() {\n    fetchSequencingRuns()\n      .then(runs => {\n        this.setState({ runs, loadingSequencingRuns: false });\n      })\n      .catch(this.handleError);\n    fetchSampleGroups()\n      .then(samplesReceived => {\n        this.setState({ samplesReceived, loadingSampleGroups: false });\n      })\n      .catch(this.handleError);\n  }\n\n  render() {\n    if (this.state.error) {\n      return (\n        <div>\n          There was a problem loading the queue. Please try again later.\n        </div>\n      );\n    }\n\n    const loading = this.state.loadingSampleGroups\n      || this.state.loadingSequencingRuns;\n    if (loading) {\n      return (\n        <div style={{textAlign: 'center'}}>\n          <PulseLoader loading={loading} color={'#281835'} />\n          <p style={{textAlign: 'center'}}>Loading queue...</p>\n        </div>\n      );\n    }\n\n    const { runs, samplesReceived } = this.state;\n    const nTotalSamples = nSamplesInRuns(filterCurrentRuns(runs, false))\n      + nSamplesInGroups(samplesReceived);\n    const miseqRuns = runs.filter(run => run.queue === 'MiSeq');\n    const nextseqRuns = runs.filter(run => run.queue === 'NextSeq');\n    return (\n      <div>\n        <div style={stylesHeaderText}>\n          Current total number of samples/slots committed to queue: &nbsp;\n          <span style={{ color: 'red' }}>{nTotalSamples}</span>\n          <br />\n          {/* TODO(karlrl): Use the last modified time of any resource for this? */}\n          {/*Last update of queue: &nbsp; <span style={{ color: 'red' }}>Apr.5</span>*/}\n        </div>\n        <p></p>\n        <table>\n        <tbody>\n          <tr>\n            <td align=\"center\">\n              <RunsUpcomingTable\n                platformName='MiSeq'\n                runs={filterCurrentRuns(miseqRuns)} />\n            </td>\n            <td width=\"30\">&nbsp;</td>\n            <td align=\"center\">\n              <RunsUpcomingTable\n                platformName='NextSeq'\n                runs={filterCurrentRuns(nextseqRuns)} />\n            </td>\n          </tr>\n        </tbody>\n        </table>\n        <section>\n          <p>\n            <font size=\"3em\">\n              Legend:\n              <span className=\"dotO\">●</span> = in progress/pending;\n              <span className=\"dotG\">●</span> = completed;\n              Extr. = extracted (either in advance by client, or by IMR);\n              Libr. = library prepared; Seq. = sequenced;\n              Anal. = analyzed (if requested).\n            </font>\n          </p>\n          <p></p>\n          <table>\n            <tbody>\n              <tr>\n                <td align=\"center\" style={{ width: '32%' }}>\n                  <SamplesReceivedTable sampleGroups={samplesReceived.reverse()}/>\n                </td>\n                <td style={{ width: '2%' }}>&nbsp;</td>\n                <td align=\"center\" style={{ width: '32%' }}>\n                  <RunsQueuedTable platformName='MiSeq' runs={miseqRuns}/>\n                </td>\n                <td style={{ width: '2%' }}>&nbsp;</td>\n                <td align=\"center\" style={{ width: '32%' }}>\n                  <RunsQueuedTable platformName='NextSeq' runs={nextseqRuns}/>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\n\nReactDOM.render(<App />, document.getElementById('queue-app-root'));\n"],"sourceRoot":""}